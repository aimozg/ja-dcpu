package dcpu.ide;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import dcpu.Dcpu;
import dcpu.Debugger;

import javax.swing.*;
import java.awt.*;

/**
 * Created by IntelliJ IDEA.
 * User: aimozg
 * Date: 08.04.12
 * Time: 12:45
 */
public class IdeMain {
    private JTextArea sourceTextarea;
    private JTable registersTable;
    private JTable memoryTable;
    private JTextArea consoleTextarea;
    private JButton openSrcButton;
    private JButton saveSrcButton;
    private JButton asmButton;
    private JButton execButton;
    private JButton runButton;
    private JButton resetButton;
    private JButton stepButton;
    private JButton breakpointButton;
    private JButton saveBinButton;
    private JButton openBinButton;
    private JButton pauseButton;
    private JButton clearButton;
    private JPanel rootPanel;

    private JFrame frame;

    private Dcpu cpu;
    private Debugger debugger;

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        new IdeMain();
    }

    public IdeMain() {
        cpu = new Dcpu();
        debugger = new Debugger();
        debugger.attachTo(cpu);

        registersTable.setModel(new RegistersModel(cpu, debugger));

        frame = new JFrame("IdeMain");
        frame.setContentPane(rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JToolBar toolBar1 = new JToolBar();
        rootPanel.add(toolBar1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        openSrcButton = new JButton();
        openSrcButton.setText("Open Src");
        openSrcButton.setToolTipText("Open source file");
        toolBar1.add(openSrcButton);
        openBinButton = new JButton();
        openBinButton.setText("Open Bin");
        openBinButton.setToolTipText("Open and disassemble binaries");
        toolBar1.add(openBinButton);
        saveSrcButton = new JButton();
        saveSrcButton.setText("Save Src");
        saveSrcButton.setToolTipText("Save sources");
        toolBar1.add(saveSrcButton);
        saveBinButton = new JButton();
        saveBinButton.setText("Save Bin");
        saveBinButton.setToolTipText("Save assembled binary");
        toolBar1.add(saveBinButton);
        final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
        toolBar1.add(toolBar$Separator1);
        asmButton = new JButton();
        asmButton.setText("Asm");
        asmButton.setToolTipText("Assemble sources");
        toolBar1.add(asmButton);
        final JToolBar.Separator toolBar$Separator2 = new JToolBar.Separator();
        toolBar1.add(toolBar$Separator2);
        resetButton = new JButton();
        resetButton.setText("Reset");
        resetButton.setToolTipText("Reset CPU");
        toolBar1.add(resetButton);
        execButton = new JButton();
        execButton.setText("Exec");
        execButton.setToolTipText("Run forever");
        toolBar1.add(execButton);
        pauseButton = new JButton();
        pauseButton.setText("Pause");
        pauseButton.setToolTipText("Pause execution");
        toolBar1.add(pauseButton);
        runButton = new JButton();
        runButton.setText("Run");
        runButton.setToolTipText("Run until breakpoint/reserved");
        toolBar1.add(runButton);
        stepButton = new JButton();
        stepButton.setText("Step");
        stepButton.setToolTipText("Execute one instruction");
        toolBar1.add(stepButton);
        final JToolBar.Separator toolBar$Separator3 = new JToolBar.Separator();
        toolBar1.add(toolBar$Separator3);
        breakpointButton = new JButton();
        breakpointButton.setText("Breakpoint");
        breakpointButton.setToolTipText("Toggle breakpoint on instruction address");
        toolBar1.add(breakpointButton);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Source");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sourceTextarea = new JTextArea();
        panel1.add(sourceTextarea, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(200, 400), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Memory");
        panel1.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Registers");
        panel1.add(label3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        registersTable = new JTable();
        panel1.add(registersTable, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        memoryTable = new JTable();
        panel1.add(memoryTable, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        consoleTextarea = new JTextArea();
        panel2.add(consoleTextarea, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 200), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Console");
        panel2.add(label4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearButton = new JButton();
        clearButton.setText("Clear");
        panel2.add(clearButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
